// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
