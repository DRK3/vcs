// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
