// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
